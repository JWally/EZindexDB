

--- File: .babelrc ---
(Skipped (non-matching extension))


--- File: .eslintrc.json ---

{
  "ignorePatterns": ["cdk.out/", "coverage/", "lib/**/*.js", "bin/*.js", "dist"],
  "env": {
    "browser": false,
    "es2021": true,
    "node": true
  },
  "extends": [
    "airbnb-base",
    "prettier",
    "plugin:@typescript-eslint/recommended" // Add TypeScript support
  ],
  "parser": "@typescript-eslint/parser", // Add TypeScript parser
  "plugins": [
    "prettier",
    "@typescript-eslint" // Add TypeScript plugin
  ],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": "./tsconfig.base.json" // Point to your tsconfig
  },
  "rules": {
    "prettier/prettier": "error",
    "import/prefer-default-export": "off",
    "no-await-in-loop": "off",
    "camelcase": "off",
    "import/extensions": [
      // Handle TypeScript imports
      "error",
      "ignorePackages",
      {
        "ts": "never",
        "tsx": "never"
      }
    ]
  },
  "settings": {
    "import/resolver": {
      // Help ESLint resolve TypeScript imports
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  },
  "overrides": [
    {
      "files": ["src/**/*.ts"], // Add TypeScript files pattern
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": "./tsconfig.base.json"
      }
    },
    {
      "files": ["test/**"],
      "plugins": ["jest"],
      "extends": ["plugin:jest/recommended"],
      "rules": {
        "import/no-extraneous-dependencies": ["error", { "devDependencies": true }]
      }
    },
    {
      "files": ["lib/**"],
      "rules": {
        "import/no-extraneous-dependencies": ["error", { "devDependencies": false }]
      }
    }
  ]
}



--- File: .git ---
(Excluded)


--- File: .gitignore ---
(Excluded)


--- File: .prettierrc.json ---

{
  "trailingComma": "es5",
  "tabWidth": 2,
  "semi": false,
  "singleQuote": true,
  "printWidth": 120
}



--- File: coverage/clover.xml ---
(Skipped (non-matching extension))


--- File: coverage/coverage-final.json ---

{"/home/justin/Dev/EZindexDB/src/index.ts": {"path":"/home/justin/Dev/EZindexDB/src/index.ts","statementMap":{"0":{"start":{"line":31,"column":35},"end":{"line":31,"column":39}},"1":{"start":{"line":32,"column":65},"end":{"line":32,"column":74}},"2":{"start":{"line":33,"column":39},"end":{"line":33,"column":44}},"3":{"start":{"line":35,"column":54},"end":{"line":35,"column":63}},"4":{"start":{"line":38,"column":4},"end":{"line":38,"column":46}},"5":{"start":{"line":39,"column":4},"end":{"line":39,"column":26}},"6":{"start":{"line":44,"column":4},"end":{"line":44,"column":54}},"7":{"start":{"line":48,"column":4},"end":{"line":48,"column":44}},"8":{"start":{"line":53,"column":4},"end":{"line":58,"column":5}},"9":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"10":{"start":{"line":55,"column":8},"end":{"line":55,"column":84}},"11":{"start":{"line":57,"column":6},"end":{"line":57,"column":12}},"12":{"start":{"line":61,"column":4},"end":{"line":63,"column":5}},"13":{"start":{"line":62,"column":6},"end":{"line":62,"column":90}},"14":{"start":{"line":66,"column":4},"end":{"line":82,"column":5}},"15":{"start":{"line":68,"column":6},"end":{"line":70,"column":7}},"16":{"start":{"line":69,"column":8},"end":{"line":69,"column":59}},"17":{"start":{"line":72,"column":6},"end":{"line":76,"column":8}},"18":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"19":{"start":{"line":74,"column":10},"end":{"line":74,"column":61}},"20":{"start":{"line":79,"column":6},"end":{"line":81,"column":7}},"21":{"start":{"line":80,"column":8},"end":{"line":80,"column":60}},"22":{"start":{"line":85,"column":4},"end":{"line":103,"column":5}},"23":{"start":{"line":86,"column":27},"end":{"line":86,"column":51}},"24":{"start":{"line":87,"column":30},"end":{"line":87,"column":56}},"25":{"start":{"line":89,"column":6},"end":{"line":97,"column":8}},"26":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"27":{"start":{"line":91,"column":10},"end":{"line":91,"column":54}},"28":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"29":{"start":{"line":95,"column":10},"end":{"line":95,"column":63}},"30":{"start":{"line":100,"column":6},"end":{"line":102,"column":7}},"31":{"start":{"line":101,"column":8},"end":{"line":101,"column":81}},"32":{"start":{"line":120,"column":4},"end":{"line":122,"column":5}},"33":{"start":{"line":121,"column":6},"end":{"line":121,"column":72}},"34":{"start":{"line":123,"column":4},"end":{"line":125,"column":5}},"35":{"start":{"line":124,"column":6},"end":{"line":124,"column":78}},"36":{"start":{"line":128,"column":4},"end":{"line":128,"column":63}},"37":{"start":{"line":128,"column":31},"end":{"line":128,"column":62}},"38":{"start":{"line":130,"column":4},"end":{"line":134,"column":5}},"39":{"start":{"line":131,"column":6},"end":{"line":131,"column":44}},"40":{"start":{"line":132,"column":6},"end":{"line":132,"column":45}},"41":{"start":{"line":133,"column":6},"end":{"line":133,"column":34}},"42":{"start":{"line":136,"column":4},"end":{"line":138,"column":5}},"43":{"start":{"line":137,"column":6},"end":{"line":137,"column":49}},"44":{"start":{"line":140,"column":4},"end":{"line":202,"column":6}},"45":{"start":{"line":141,"column":22},"end":{"line":141,"column":60}},"46":{"start":{"line":143,"column":6},"end":{"line":146,"column":7}},"47":{"start":{"line":144,"column":8},"end":{"line":144,"column":30}},"48":{"start":{"line":145,"column":8},"end":{"line":145,"column":79}},"49":{"start":{"line":148,"column":6},"end":{"line":150,"column":7}},"50":{"start":{"line":149,"column":8},"end":{"line":149,"column":94}},"51":{"start":{"line":152,"column":6},"end":{"line":189,"column":7}},"52":{"start":{"line":153,"column":19},"end":{"line":153,"column":60}},"53":{"start":{"line":155,"column":8},"end":{"line":188,"column":9}},"54":{"start":{"line":156,"column":10},"end":{"line":185,"column":11}},"55":{"start":{"line":158,"column":26},"end":{"line":158,"column":65}},"56":{"start":{"line":161,"column":36},"end":{"line":161,"column":64}},"57":{"start":{"line":162,"column":12},"end":{"line":171,"column":14}},"58":{"start":{"line":163,"column":32},"end":{"line":163,"column":78}},"59":{"start":{"line":164,"column":14},"end":{"line":170,"column":15}},"60":{"start":{"line":165,"column":16},"end":{"line":169,"column":17}},"61":{"start":{"line":166,"column":18},"end":{"line":166,"column":49}},"62":{"start":{"line":168,"column":18},"end":{"line":168,"column":77}},"63":{"start":{"line":173,"column":26},"end":{"line":176,"column":14}},"64":{"start":{"line":178,"column":12},"end":{"line":184,"column":14}},"65":{"start":{"line":179,"column":14},"end":{"line":183,"column":15}},"66":{"start":{"line":180,"column":16},"end":{"line":180,"column":47}},"67":{"start":{"line":182,"column":16},"end":{"line":182,"column":75}},"68":{"start":{"line":187,"column":10},"end":{"line":187,"column":23}},"69":{"start":{"line":191,"column":6},"end":{"line":201,"column":7}},"70":{"start":{"line":192,"column":8},"end":{"line":192,"column":32}},"71":{"start":{"line":195,"column":8},"end":{"line":198,"column":9}},"72":{"start":{"line":196,"column":10},"end":{"line":196,"column":32}},"73":{"start":{"line":197,"column":10},"end":{"line":197,"column":49}},"74":{"start":{"line":200,"column":8},"end":{"line":200,"column":21}},"75":{"start":{"line":206,"column":4},"end":{"line":208,"column":5}},"76":{"start":{"line":207,"column":6},"end":{"line":207,"column":81}},"77":{"start":{"line":212,"column":4},"end":{"line":214,"column":5}},"78":{"start":{"line":213,"column":6},"end":{"line":213,"column":66}},"79":{"start":{"line":215,"column":4},"end":{"line":215,"column":39}},"80":{"start":{"line":219,"column":20},"end":{"line":219,"column":61}},"81":{"start":{"line":220,"column":4},"end":{"line":220,"column":53}},"82":{"start":{"line":221,"column":4},"end":{"line":221,"column":18}},"83":{"start":{"line":225,"column":4},"end":{"line":225,"column":29}},"84":{"start":{"line":226,"column":24},"end":{"line":226,"column":57}},"85":{"start":{"line":228,"column":4},"end":{"line":231,"column":5}},"86":{"start":{"line":229,"column":6},"end":{"line":229,"column":28}},"87":{"start":{"line":230,"column":6},"end":{"line":230,"column":75}},"88":{"start":{"line":233,"column":4},"end":{"line":235,"column":5}},"89":{"start":{"line":234,"column":6},"end":{"line":234,"column":49}},"90":{"start":{"line":237,"column":4},"end":{"line":237,"column":41}},"91":{"start":{"line":241,"column":4},"end":{"line":247,"column":5}},"92":{"start":{"line":242,"column":26},"end":{"line":242,"column":52}},"93":{"start":{"line":243,"column":17},"end":{"line":243,"column":49}},"94":{"start":{"line":244,"column":6},"end":{"line":244,"column":18}},"95":{"start":{"line":245,"column":6},"end":{"line":245,"column":48}},"96":{"start":{"line":246,"column":6},"end":{"line":246,"column":15}},"97":{"start":{"line":249,"column":4},"end":{"line":263,"column":6}},"98":{"start":{"line":250,"column":6},"end":{"line":262,"column":7}},"99":{"start":{"line":251,"column":22},"end":{"line":251,"column":55}},"100":{"start":{"line":252,"column":24},"end":{"line":252,"column":39}},"101":{"start":{"line":254,"column":8},"end":{"line":257,"column":9}},"102":{"start":{"line":255,"column":10},"end":{"line":255,"column":32}},"103":{"start":{"line":256,"column":10},"end":{"line":256,"column":81}},"104":{"start":{"line":259,"column":8},"end":{"line":259,"column":57}},"105":{"start":{"line":259,"column":34},"end":{"line":259,"column":57}},"106":{"start":{"line":261,"column":8},"end":{"line":261,"column":21}},"107":{"start":{"line":267,"column":4},"end":{"line":272,"column":5}},"108":{"start":{"line":268,"column":26},"end":{"line":268,"column":52}},"109":{"start":{"line":269,"column":21},"end":{"line":269,"column":40}},"110":{"start":{"line":270,"column":6},"end":{"line":270,"column":78}},"111":{"start":{"line":270,"column":19},"end":{"line":270,"column":78}},"112":{"start":{"line":271,"column":6},"end":{"line":271,"column":36}},"113":{"start":{"line":274,"column":4},"end":{"line":294,"column":6}},"114":{"start":{"line":275,"column":6},"end":{"line":293,"column":7}},"115":{"start":{"line":276,"column":22},"end":{"line":276,"column":54}},"116":{"start":{"line":277,"column":24},"end":{"line":277,"column":37}},"117":{"start":{"line":279,"column":8},"end":{"line":282,"column":9}},"118":{"start":{"line":280,"column":10},"end":{"line":280,"column":32}},"119":{"start":{"line":281,"column":10},"end":{"line":281,"column":79}},"120":{"start":{"line":284,"column":8},"end":{"line":290,"column":9}},"121":{"start":{"line":285,"column":10},"end":{"line":289,"column":11}},"122":{"start":{"line":286,"column":12},"end":{"line":286,"column":35}},"123":{"start":{"line":288,"column":12},"end":{"line":288,"column":63}},"124":{"start":{"line":292,"column":8},"end":{"line":292,"column":21}},"125":{"start":{"line":298,"column":4},"end":{"line":300,"column":5}},"126":{"start":{"line":299,"column":6},"end":{"line":299,"column":57}},"127":{"start":{"line":302,"column":4},"end":{"line":309,"column":5}},"128":{"start":{"line":303,"column":26},"end":{"line":303,"column":52}},"129":{"start":{"line":304,"column":6},"end":{"line":306,"column":7}},"130":{"start":{"line":305,"column":8},"end":{"line":305,"column":73}},"131":{"start":{"line":307,"column":6},"end":{"line":307,"column":53}},"132":{"start":{"line":308,"column":6},"end":{"line":308,"column":20}},"133":{"start":{"line":313,"column":19},"end":{"line":313,"column":51}},"134":{"start":{"line":315,"column":4},"end":{"line":329,"column":6}},"135":{"start":{"line":316,"column":6},"end":{"line":328,"column":7}},"136":{"start":{"line":317,"column":22},"end":{"line":317,"column":55}},"137":{"start":{"line":318,"column":24},"end":{"line":318,"column":39}},"138":{"start":{"line":320,"column":8},"end":{"line":323,"column":9}},"139":{"start":{"line":321,"column":10},"end":{"line":321,"column":32}},"140":{"start":{"line":322,"column":10},"end":{"line":322,"column":81}},"141":{"start":{"line":325,"column":8},"end":{"line":325,"column":57}},"142":{"start":{"line":325,"column":34},"end":{"line":325,"column":57}},"143":{"start":{"line":327,"column":8},"end":{"line":327,"column":21}},"144":{"start":{"line":333,"column":4},"end":{"line":336,"column":5}},"145":{"start":{"line":334,"column":26},"end":{"line":334,"column":52}},"146":{"start":{"line":335,"column":6},"end":{"line":335,"column":35}},"147":{"start":{"line":340,"column":19},"end":{"line":340,"column":46}},"148":{"start":{"line":342,"column":4},"end":{"line":356,"column":6}},"149":{"start":{"line":343,"column":6},"end":{"line":355,"column":7}},"150":{"start":{"line":344,"column":22},"end":{"line":344,"column":55}},"151":{"start":{"line":345,"column":24},"end":{"line":345,"column":40}},"152":{"start":{"line":347,"column":8},"end":{"line":350,"column":9}},"153":{"start":{"line":348,"column":10},"end":{"line":348,"column":32}},"154":{"start":{"line":349,"column":10},"end":{"line":349,"column":81}},"155":{"start":{"line":352,"column":8},"end":{"line":352,"column":47}},"156":{"start":{"line":352,"column":34},"end":{"line":352,"column":47}},"157":{"start":{"line":354,"column":8},"end":{"line":354,"column":21}},"158":{"start":{"line":360,"column":4},"end":{"line":363,"column":5}},"159":{"start":{"line":361,"column":26},"end":{"line":361,"column":52}},"160":{"start":{"line":362,"column":6},"end":{"line":362,"column":86}},"161":{"start":{"line":362,"column":62},"end":{"line":362,"column":85}},"162":{"start":{"line":365,"column":4},"end":{"line":379,"column":6}},"163":{"start":{"line":366,"column":6},"end":{"line":378,"column":7}},"164":{"start":{"line":367,"column":22},"end":{"line":367,"column":54}},"165":{"start":{"line":368,"column":24},"end":{"line":368,"column":38}},"166":{"start":{"line":370,"column":8},"end":{"line":373,"column":9}},"167":{"start":{"line":371,"column":10},"end":{"line":371,"column":32}},"168":{"start":{"line":372,"column":10},"end":{"line":372,"column":83}},"169":{"start":{"line":375,"column":8},"end":{"line":375,"column":57}},"170":{"start":{"line":375,"column":34},"end":{"line":375,"column":57}},"171":{"start":{"line":377,"column":8},"end":{"line":377,"column":21}},"172":{"start":{"line":383,"column":4},"end":{"line":386,"column":5}},"173":{"start":{"line":384,"column":26},"end":{"line":384,"column":52}},"174":{"start":{"line":385,"column":6},"end":{"line":385,"column":29}},"175":{"start":{"line":388,"column":4},"end":{"line":402,"column":6}},"176":{"start":{"line":389,"column":6},"end":{"line":401,"column":7}},"177":{"start":{"line":390,"column":22},"end":{"line":390,"column":54}},"178":{"start":{"line":391,"column":24},"end":{"line":391,"column":37}},"179":{"start":{"line":393,"column":8},"end":{"line":396,"column":9}},"180":{"start":{"line":394,"column":10},"end":{"line":394,"column":32}},"181":{"start":{"line":395,"column":10},"end":{"line":395,"column":81}},"182":{"start":{"line":398,"column":8},"end":{"line":398,"column":57}},"183":{"start":{"line":398,"column":34},"end":{"line":398,"column":57}},"184":{"start":{"line":400,"column":8},"end":{"line":400,"column":21}},"185":{"start":{"line":406,"column":4},"end":{"line":414,"column":5}},"186":{"start":{"line":407,"column":6},"end":{"line":407,"column":30}},"187":{"start":{"line":408,"column":6},"end":{"line":408,"column":39}},"188":{"start":{"line":409,"column":11},"end":{"line":414,"column":5}},"189":{"start":{"line":412,"column":6},"end":{"line":412,"column":21}},"190":{"start":{"line":413,"column":6},"end":{"line":413,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":37,"column":2},"end":{"line":37,"column":3}},"loc":{"start":{"line":37,"column":71},"end":{"line":40,"column":3}},"line":37},"1":{"name":"(anonymous_1)","decl":{"start":{"line":43,"column":2},"end":{"line":43,"column":3}},"loc":{"start":{"line":43,"column":65},"end":{"line":45,"column":3}},"line":43},"2":{"name":"(anonymous_2)","decl":{"start":{"line":47,"column":2},"end":{"line":47,"column":3}},"loc":{"start":{"line":47,"column":71},"end":{"line":49,"column":3}},"line":47},"3":{"name":"(anonymous_3)","decl":{"start":{"line":51,"column":2},"end":{"line":51,"column":3}},"loc":{"start":{"line":51,"column":70},"end":{"line":104,"column":3}},"line":51},"4":{"name":"(anonymous_4)","decl":{"start":{"line":72,"column":28},"end":{"line":72,"column":29}},"loc":{"start":{"line":72,"column":38},"end":{"line":76,"column":7}},"line":72},"5":{"name":"(anonymous_5)","decl":{"start":{"line":89,"column":30},"end":{"line":89,"column":31}},"loc":{"start":{"line":89,"column":42},"end":{"line":97,"column":7}},"line":89},"6":{"name":"(anonymous_6)","decl":{"start":{"line":114,"column":2},"end":{"line":114,"column":3}},"loc":{"start":{"line":118,"column":22},"end":{"line":203,"column":3}},"line":118},"7":{"name":"(anonymous_7)","decl":{"start":{"line":128,"column":20},"end":{"line":128,"column":21}},"loc":{"start":{"line":128,"column":31},"end":{"line":128,"column":62}},"line":128},"8":{"name":"(anonymous_8)","decl":{"start":{"line":140,"column":23},"end":{"line":140,"column":24}},"loc":{"start":{"line":140,"column":44},"end":{"line":202,"column":5}},"line":140},"9":{"name":"(anonymous_9)","decl":{"start":{"line":143,"column":24},"end":{"line":143,"column":25}},"loc":{"start":{"line":143,"column":35},"end":{"line":146,"column":7}},"line":143},"10":{"name":"(anonymous_10)","decl":{"start":{"line":148,"column":26},"end":{"line":148,"column":27}},"loc":{"start":{"line":148,"column":37},"end":{"line":150,"column":7}},"line":148},"11":{"name":"(anonymous_11)","decl":{"start":{"line":152,"column":32},"end":{"line":152,"column":33}},"loc":{"start":{"line":152,"column":43},"end":{"line":189,"column":7}},"line":152},"12":{"name":"(anonymous_12)","decl":{"start":{"line":162,"column":28},"end":{"line":162,"column":29}},"loc":{"start":{"line":162,"column":39},"end":{"line":171,"column":13}},"line":162},"13":{"name":"(anonymous_13)","decl":{"start":{"line":178,"column":28},"end":{"line":178,"column":29}},"loc":{"start":{"line":178,"column":39},"end":{"line":184,"column":13}},"line":178},"14":{"name":"(anonymous_14)","decl":{"start":{"line":191,"column":26},"end":{"line":191,"column":27}},"loc":{"start":{"line":191,"column":32},"end":{"line":201,"column":7}},"line":191},"15":{"name":"(anonymous_15)","decl":{"start":{"line":195,"column":26},"end":{"line":195,"column":27}},"loc":{"start":{"line":195,"column":37},"end":{"line":198,"column":9}},"line":195},"16":{"name":"(anonymous_16)","decl":{"start":{"line":205,"column":2},"end":{"line":205,"column":3}},"loc":{"start":{"line":205,"column":37},"end":{"line":209,"column":3}},"line":205},"17":{"name":"(anonymous_17)","decl":{"start":{"line":211,"column":2},"end":{"line":211,"column":3}},"loc":{"start":{"line":211,"column":68},"end":{"line":216,"column":3}},"line":211},"18":{"name":"(anonymous_18)","decl":{"start":{"line":218,"column":2},"end":{"line":218,"column":3}},"loc":{"start":{"line":218,"column":43},"end":{"line":222,"column":3}},"line":218},"19":{"name":"(anonymous_19)","decl":{"start":{"line":224,"column":2},"end":{"line":224,"column":3}},"loc":{"start":{"line":224,"column":76},"end":{"line":238,"column":3}},"line":224},"20":{"name":"(anonymous_20)","decl":{"start":{"line":228,"column":26},"end":{"line":228,"column":27}},"loc":{"start":{"line":228,"column":37},"end":{"line":231,"column":5}},"line":228},"21":{"name":"(anonymous_21)","decl":{"start":{"line":233,"column":26},"end":{"line":233,"column":27}},"loc":{"start":{"line":233,"column":32},"end":{"line":235,"column":5}},"line":233},"22":{"name":"(anonymous_22)","decl":{"start":{"line":240,"column":2},"end":{"line":240,"column":3}},"loc":{"start":{"line":240,"column":69},"end":{"line":264,"column":3}},"line":240},"23":{"name":"(anonymous_23)","decl":{"start":{"line":249,"column":23},"end":{"line":249,"column":24}},"loc":{"start":{"line":249,"column":44},"end":{"line":263,"column":5}},"line":249},"24":{"name":"(anonymous_24)","decl":{"start":{"line":254,"column":26},"end":{"line":254,"column":27}},"loc":{"start":{"line":254,"column":37},"end":{"line":257,"column":9}},"line":254},"25":{"name":"(anonymous_25)","decl":{"start":{"line":259,"column":28},"end":{"line":259,"column":29}},"loc":{"start":{"line":259,"column":34},"end":{"line":259,"column":57}},"line":259},"26":{"name":"(anonymous_26)","decl":{"start":{"line":266,"column":2},"end":{"line":266,"column":3}},"loc":{"start":{"line":266,"column":65},"end":{"line":295,"column":3}},"line":266},"27":{"name":"(anonymous_27)","decl":{"start":{"line":274,"column":23},"end":{"line":274,"column":24}},"loc":{"start":{"line":274,"column":44},"end":{"line":294,"column":5}},"line":274},"28":{"name":"(anonymous_28)","decl":{"start":{"line":279,"column":26},"end":{"line":279,"column":27}},"loc":{"start":{"line":279,"column":37},"end":{"line":282,"column":9}},"line":279},"29":{"name":"(anonymous_29)","decl":{"start":{"line":284,"column":28},"end":{"line":284,"column":29}},"loc":{"start":{"line":284,"column":34},"end":{"line":290,"column":9}},"line":284},"30":{"name":"(anonymous_30)","decl":{"start":{"line":297,"column":2},"end":{"line":297,"column":3}},"loc":{"start":{"line":297,"column":69},"end":{"line":330,"column":3}},"line":297},"31":{"name":"(anonymous_31)","decl":{"start":{"line":315,"column":23},"end":{"line":315,"column":24}},"loc":{"start":{"line":315,"column":44},"end":{"line":329,"column":5}},"line":315},"32":{"name":"(anonymous_32)","decl":{"start":{"line":320,"column":26},"end":{"line":320,"column":27}},"loc":{"start":{"line":320,"column":37},"end":{"line":323,"column":9}},"line":320},"33":{"name":"(anonymous_33)","decl":{"start":{"line":325,"column":28},"end":{"line":325,"column":29}},"loc":{"start":{"line":325,"column":34},"end":{"line":325,"column":57}},"line":325},"34":{"name":"(anonymous_34)","decl":{"start":{"line":332,"column":2},"end":{"line":332,"column":3}},"loc":{"start":{"line":332,"column":66},"end":{"line":357,"column":3}},"line":332},"35":{"name":"(anonymous_35)","decl":{"start":{"line":342,"column":23},"end":{"line":342,"column":24}},"loc":{"start":{"line":342,"column":44},"end":{"line":356,"column":5}},"line":342},"36":{"name":"(anonymous_36)","decl":{"start":{"line":347,"column":26},"end":{"line":347,"column":27}},"loc":{"start":{"line":347,"column":37},"end":{"line":350,"column":9}},"line":347},"37":{"name":"(anonymous_37)","decl":{"start":{"line":352,"column":28},"end":{"line":352,"column":29}},"loc":{"start":{"line":352,"column":34},"end":{"line":352,"column":47}},"line":352},"38":{"name":"(anonymous_38)","decl":{"start":{"line":359,"column":2},"end":{"line":359,"column":3}},"loc":{"start":{"line":359,"column":51},"end":{"line":380,"column":3}},"line":359},"39":{"name":"(anonymous_39)","decl":{"start":{"line":362,"column":50},"end":{"line":362,"column":51}},"loc":{"start":{"line":362,"column":62},"end":{"line":362,"column":85}},"line":362},"40":{"name":"(anonymous_40)","decl":{"start":{"line":365,"column":23},"end":{"line":365,"column":24}},"loc":{"start":{"line":365,"column":44},"end":{"line":379,"column":5}},"line":365},"41":{"name":"(anonymous_41)","decl":{"start":{"line":370,"column":26},"end":{"line":370,"column":27}},"loc":{"start":{"line":370,"column":37},"end":{"line":373,"column":9}},"line":370},"42":{"name":"(anonymous_42)","decl":{"start":{"line":375,"column":28},"end":{"line":375,"column":29}},"loc":{"start":{"line":375,"column":34},"end":{"line":375,"column":57}},"line":375},"43":{"name":"(anonymous_43)","decl":{"start":{"line":382,"column":2},"end":{"line":382,"column":3}},"loc":{"start":{"line":382,"column":53},"end":{"line":403,"column":3}},"line":382},"44":{"name":"(anonymous_44)","decl":{"start":{"line":388,"column":23},"end":{"line":388,"column":24}},"loc":{"start":{"line":388,"column":44},"end":{"line":402,"column":5}},"line":388},"45":{"name":"(anonymous_45)","decl":{"start":{"line":393,"column":26},"end":{"line":393,"column":27}},"loc":{"start":{"line":393,"column":37},"end":{"line":396,"column":9}},"line":393},"46":{"name":"(anonymous_46)","decl":{"start":{"line":398,"column":28},"end":{"line":398,"column":29}},"loc":{"start":{"line":398,"column":34},"end":{"line":398,"column":57}},"line":398},"47":{"name":"(anonymous_47)","decl":{"start":{"line":405,"column":2},"end":{"line":405,"column":3}},"loc":{"start":{"line":405,"column":31},"end":{"line":415,"column":3}},"line":405}},"branchMap":{"0":{"loc":{"start":{"line":37,"column":14},"end":{"line":37,"column":48}},"type":"default-arg","locations":[{"start":{"line":37,"column":43},"end":{"line":37,"column":48}}],"line":37},"1":{"loc":{"start":{"line":37,"column":50},"end":{"line":37,"column":69}},"type":"default-arg","locations":[{"start":{"line":37,"column":68},"end":{"line":37,"column":69}}],"line":37},"2":{"loc":{"start":{"line":53,"column":4},"end":{"line":58,"column":5}},"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":58,"column":5}},{"start":{},"end":{}}],"line":53},"3":{"loc":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},{"start":{},"end":{}}],"line":54},"4":{"loc":{"start":{"line":61,"column":4},"end":{"line":63,"column":5}},"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":63,"column":5}},{"start":{},"end":{}}],"line":61},"5":{"loc":{"start":{"line":61,"column":8},"end":{"line":61,"column":72}},"type":"binary-expr","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":38}},{"start":{"line":61,"column":42},"end":{"line":61,"column":72}}],"line":61},"6":{"loc":{"start":{"line":66,"column":4},"end":{"line":82,"column":5}},"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":82,"column":5}},{"start":{"line":77,"column":11},"end":{"line":82,"column":5}}],"line":66},"7":{"loc":{"start":{"line":68,"column":6},"end":{"line":70,"column":7}},"type":"if","locations":[{"start":{"line":68,"column":6},"end":{"line":70,"column":7}},{"start":{},"end":{}}],"line":68},"8":{"loc":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},{"start":{},"end":{}}],"line":73},"9":{"loc":{"start":{"line":79,"column":6},"end":{"line":81,"column":7}},"type":"if","locations":[{"start":{"line":79,"column":6},"end":{"line":81,"column":7}},{"start":{},"end":{}}],"line":79},"10":{"loc":{"start":{"line":85,"column":4},"end":{"line":103,"column":5}},"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":103,"column":5}},{"start":{},"end":{}}],"line":85},"11":{"loc":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"type":"if","locations":[{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},{"start":{},"end":{}}],"line":90},"12":{"loc":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},{"start":{},"end":{}}],"line":94},"13":{"loc":{"start":{"line":100,"column":6},"end":{"line":102,"column":7}},"type":"if","locations":[{"start":{"line":100,"column":6},"end":{"line":102,"column":7}},{"start":{},"end":{}}],"line":100},"14":{"loc":{"start":{"line":100,"column":10},"end":{"line":100,"column":66}},"type":"binary-expr","locations":[{"start":{"line":100,"column":10},"end":{"line":100,"column":34}},{"start":{"line":100,"column":38},"end":{"line":100,"column":66}}],"line":100},"15":{"loc":{"start":{"line":117,"column":4},"end":{"line":117,"column":47}},"type":"default-arg","locations":[{"start":{"line":117,"column":45},"end":{"line":117,"column":47}}],"line":117},"16":{"loc":{"start":{"line":120,"column":4},"end":{"line":122,"column":5}},"type":"if","locations":[{"start":{"line":120,"column":4},"end":{"line":122,"column":5}},{"start":{},"end":{}}],"line":120},"17":{"loc":{"start":{"line":123,"column":4},"end":{"line":125,"column":5}},"type":"if","locations":[{"start":{"line":123,"column":4},"end":{"line":125,"column":5}},{"start":{},"end":{}}],"line":123},"18":{"loc":{"start":{"line":130,"column":4},"end":{"line":134,"column":5}},"type":"if","locations":[{"start":{"line":130,"column":4},"end":{"line":134,"column":5}},{"start":{},"end":{}}],"line":130},"19":{"loc":{"start":{"line":136,"column":4},"end":{"line":138,"column":5}},"type":"if","locations":[{"start":{"line":136,"column":4},"end":{"line":138,"column":5}},{"start":{},"end":{}}],"line":136},"20":{"loc":{"start":{"line":156,"column":10},"end":{"line":185,"column":11}},"type":"if","locations":[{"start":{"line":156,"column":10},"end":{"line":185,"column":11}},{"start":{"line":172,"column":17},"end":{"line":185,"column":11}}],"line":156},"21":{"loc":{"start":{"line":163,"column":32},"end":{"line":163,"column":78}},"type":"cond-expr","locations":[{"start":{"line":163,"column":60},"end":{"line":163,"column":65}},{"start":{"line":163,"column":68},"end":{"line":163,"column":78}}],"line":163},"22":{"loc":{"start":{"line":164,"column":14},"end":{"line":170,"column":15}},"type":"if","locations":[{"start":{"line":164,"column":14},"end":{"line":170,"column":15}},{"start":{},"end":{}}],"line":164},"23":{"loc":{"start":{"line":165,"column":16},"end":{"line":169,"column":17}},"type":"if","locations":[{"start":{"line":165,"column":16},"end":{"line":169,"column":17}},{"start":{"line":167,"column":23},"end":{"line":169,"column":17}}],"line":165},"24":{"loc":{"start":{"line":179,"column":14},"end":{"line":183,"column":15}},"type":"if","locations":[{"start":{"line":179,"column":14},"end":{"line":183,"column":15}},{"start":{"line":181,"column":21},"end":{"line":183,"column":15}}],"line":179},"25":{"loc":{"start":{"line":206,"column":4},"end":{"line":208,"column":5}},"type":"if","locations":[{"start":{"line":206,"column":4},"end":{"line":208,"column":5}},{"start":{},"end":{}}],"line":206},"26":{"loc":{"start":{"line":206,"column":8},"end":{"line":206,"column":43}},"type":"binary-expr","locations":[{"start":{"line":206,"column":8},"end":{"line":206,"column":16}},{"start":{"line":206,"column":20},"end":{"line":206,"column":43}}],"line":206},"27":{"loc":{"start":{"line":212,"column":4},"end":{"line":214,"column":5}},"type":"if","locations":[{"start":{"line":212,"column":4},"end":{"line":214,"column":5}},{"start":{},"end":{}}],"line":212},"28":{"loc":{"start":{"line":219,"column":20},"end":{"line":219,"column":61}},"type":"binary-expr","locations":[{"start":{"line":219,"column":20},"end":{"line":219,"column":56}},{"start":{"line":219,"column":60},"end":{"line":219,"column":61}}],"line":219},"29":{"loc":{"start":{"line":241,"column":4},"end":{"line":247,"column":5}},"type":"if","locations":[{"start":{"line":241,"column":4},"end":{"line":247,"column":5}},{"start":{},"end":{}}],"line":241},"30":{"loc":{"start":{"line":243,"column":17},"end":{"line":243,"column":49}},"type":"binary-expr","locations":[{"start":{"line":243,"column":17},"end":{"line":243,"column":24}},{"start":{"line":243,"column":28},"end":{"line":243,"column":49}}],"line":243},"31":{"loc":{"start":{"line":267,"column":4},"end":{"line":272,"column":5}},"type":"if","locations":[{"start":{"line":267,"column":4},"end":{"line":272,"column":5}},{"start":{},"end":{}}],"line":267},"32":{"loc":{"start":{"line":270,"column":6},"end":{"line":270,"column":78}},"type":"if","locations":[{"start":{"line":270,"column":6},"end":{"line":270,"column":78}},{"start":{},"end":{}}],"line":270},"33":{"loc":{"start":{"line":285,"column":10},"end":{"line":289,"column":11}},"type":"if","locations":[{"start":{"line":285,"column":10},"end":{"line":289,"column":11}},{"start":{"line":287,"column":17},"end":{"line":289,"column":11}}],"line":285},"34":{"loc":{"start":{"line":298,"column":4},"end":{"line":300,"column":5}},"type":"if","locations":[{"start":{"line":298,"column":4},"end":{"line":300,"column":5}},{"start":{},"end":{}}],"line":298},"35":{"loc":{"start":{"line":302,"column":4},"end":{"line":309,"column":5}},"type":"if","locations":[{"start":{"line":302,"column":4},"end":{"line":309,"column":5}},{"start":{},"end":{}}],"line":302},"36":{"loc":{"start":{"line":304,"column":6},"end":{"line":306,"column":7}},"type":"if","locations":[{"start":{"line":304,"column":6},"end":{"line":306,"column":7}},{"start":{},"end":{}}],"line":304},"37":{"loc":{"start":{"line":333,"column":4},"end":{"line":336,"column":5}},"type":"if","locations":[{"start":{"line":333,"column":4},"end":{"line":336,"column":5}},{"start":{},"end":{}}],"line":333},"38":{"loc":{"start":{"line":360,"column":4},"end":{"line":363,"column":5}},"type":"if","locations":[{"start":{"line":360,"column":4},"end":{"line":363,"column":5}},{"start":{},"end":{}}],"line":360},"39":{"loc":{"start":{"line":383,"column":4},"end":{"line":386,"column":5}},"type":"if","locations":[{"start":{"line":383,"column":4},"end":{"line":386,"column":5}},{"start":{},"end":{}}],"line":383},"40":{"loc":{"start":{"line":406,"column":4},"end":{"line":414,"column":5}},"type":"if","locations":[{"start":{"line":406,"column":4},"end":{"line":414,"column":5}},{"start":{"line":409,"column":11},"end":{"line":414,"column":5}}],"line":406},"41":{"loc":{"start":{"line":409,"column":11},"end":{"line":414,"column":5}},"type":"if","locations":[{"start":{"line":409,"column":11},"end":{"line":414,"column":5}},{"start":{},"end":{}}],"line":409}},"s":{"0":68,"1":68,"2":68,"3":68,"4":68,"5":68,"6":68,"7":69,"8":34,"9":12,"10":5,"11":7,"12":22,"13":3,"14":19,"15":8,"16":2,"17":6,"18":12,"19":3,"20":11,"21":1,"22":13,"23":7,"24":7,"25":7,"26":8,"27":1,"28":7,"29":1,"30":5,"31":1,"32":69,"33":1,"34":68,"35":1,"36":67,"37":34,"38":50,"39":9,"40":9,"41":9,"42":41,"43":1,"44":40,"45":40,"46":40,"47":0,"48":0,"49":40,"50":0,"51":40,"52":36,"53":36,"54":36,"55":2,"56":2,"57":2,"58":3,"59":3,"60":3,"61":1,"62":2,"63":34,"64":34,"65":8,"66":3,"67":5,"68":0,"69":40,"70":40,"71":40,"72":1,"73":1,"74":40,"75":60,"76":5,"77":19,"78":6,"79":13,"80":6,"81":6,"82":6,"83":60,"84":55,"85":55,"86":1,"87":1,"88":55,"89":0,"90":55,"91":27,"92":6,"93":6,"94":6,"95":6,"96":6,"97":21,"98":21,"99":21,"100":18,"101":16,"102":1,"103":1,"104":16,"105":15,"106":5,"107":24,"108":3,"109":2,"110":2,"111":1,"112":1,"113":21,"114":21,"115":21,"116":21,"117":19,"118":0,"119":0,"120":19,"121":19,"122":13,"123":6,"124":2,"125":10,"126":1,"127":9,"128":3,"129":2,"130":1,"131":1,"132":1,"133":6,"134":5,"135":5,"136":5,"137":5,"138":4,"139":0,"140":0,"141":4,"142":4,"143":1,"144":9,"145":2,"146":1,"147":7,"148":4,"149":4,"150":4,"151":4,"152":4,"153":0,"154":0,"155":4,"156":4,"157":0,"158":10,"159":4,"160":2,"161":2,"162":6,"163":6,"164":6,"165":5,"166":5,"167":0,"168":0,"169":5,"170":5,"171":1,"172":4,"173":1,"174":0,"175":3,"176":3,"177":3,"178":2,"179":2,"180":0,"181":0,"182":2,"183":2,"184":1,"185":64,"186":9,"187":9,"188":55,"189":35,"190":35},"f":{"0":68,"1":68,"2":69,"3":34,"4":12,"5":8,"6":69,"7":34,"8":40,"9":0,"10":0,"11":36,"12":3,"13":8,"14":40,"15":1,"16":60,"17":19,"18":6,"19":60,"20":1,"21":0,"22":27,"23":21,"24":1,"25":15,"26":24,"27":21,"28":0,"29":19,"30":10,"31":5,"32":0,"33":4,"34":9,"35":4,"36":0,"37":4,"38":10,"39":2,"40":6,"41":0,"42":5,"43":4,"44":3,"45":0,"46":2,"47":64},"b":{"0":[56],"1":[66],"2":[12,22],"3":[5,7],"4":[3,19],"5":[22,3],"6":[8,11],"7":[2,6],"8":[3,9],"9":[1,10],"10":[7,6],"11":[1,7],"12":[1,6],"13":[1,4],"14":[5,2],"15":[41],"16":[1,68],"17":[1,67],"18":[9,41],"19":[1,40],"20":[2,34],"21":[1,2],"22":[3,0],"23":[1,2],"24":[3,5],"25":[5,55],"26":[60,5],"27":[6,13],"28":[6,0],"29":[6,21],"30":[6,6],"31":[3,21],"32":[1,1],"33":[13,6],"34":[1,9],"35":[3,6],"36":[1,1],"37":[2,7],"38":[4,6],"39":[1,3],"40":[9,55],"41":[35,20]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6eecfa6adf5e144e6cfa79946cb4891ad806de72"}
}



--- File: coverage/lcov-report/base.css ---
(Skipped (non-matching extension))


--- File: coverage/lcov-report/block-navigation.js ---

/* eslint-disable */
var jumpToCode = (function init() {
    // Classes of code we would like to highlight in the file view
    var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];

    // Elements to highlight in the file listing view
    var fileListingElements = ['td.pct.low'];

    // We don't want to select elements that are direct descendants of another match
    var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `

    // Selecter that finds elements on the page to which we can jump
    var selector =
        fileListingElements.join(', ') +
        ', ' +
        notSelector +
        missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`

    // The NodeList of matching elements
    var missingCoverageElements = document.querySelectorAll(selector);

    var currentIndex;

    function toggleClass(index) {
        missingCoverageElements
            .item(currentIndex)
            .classList.remove('highlighted');
        missingCoverageElements.item(index).classList.add('highlighted');
    }

    function makeCurrent(index) {
        toggleClass(index);
        currentIndex = index;
        missingCoverageElements.item(index).scrollIntoView({
            behavior: 'smooth',
            block: 'center',
            inline: 'center'
        });
    }

    function goToPrevious() {
        var nextIndex = 0;
        if (typeof currentIndex !== 'number' || currentIndex === 0) {
            nextIndex = missingCoverageElements.length - 1;
        } else if (missingCoverageElements.length > 1) {
            nextIndex = currentIndex - 1;
        }

        makeCurrent(nextIndex);
    }

    function goToNext() {
        var nextIndex = 0;

        if (
            typeof currentIndex === 'number' &&
            currentIndex < missingCoverageElements.length - 1
        ) {
            nextIndex = currentIndex + 1;
        }

        makeCurrent(nextIndex);
    }

    return function jump(event) {
        if (
            document.getElementById('fileSearch') === document.activeElement &&
            document.activeElement != null
        ) {
            // if we're currently focused on the search input, we don't want to navigate
            return;
        }

        switch (event.which) {
            case 78: // n
            case 74: // j
                goToNext();
                break;
            case 66: // b
            case 75: // k
            case 80: // p
                goToPrevious();
                break;
        }
    };
})();
window.addEventListener('keydown', jumpToCode);



--- File: coverage/lcov-report/favicon.png ---
(Skipped (non-matching extension))


--- File: coverage/lcov-report/index.html ---
(Skipped (non-matching extension))


--- File: coverage/lcov-report/index.ts.html ---
(Skipped (non-matching extension))


--- File: coverage/lcov-report/prettify.css ---
(Skipped (non-matching extension))


--- File: coverage/lcov-report/prettify.js ---

/* eslint-disable */
window.PR_SHOULD_USE_CONTINUATION=true;(function(){var h=["break,continue,do,else,for,if,return,while"];var u=[h,"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"];var p=[u,"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"];var l=[p,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"];var x=[p,"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"];var R=[x,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var"];var r="all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes";var w=[p,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"];var s="caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END";var I=[h,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"];var f=[h,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"];var H=[h,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"];var A=[l,R,w,s+I,f,H];var e=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)/;var C="str";var z="kwd";var j="com";var O="typ";var G="lit";var L="pun";var F="pln";var m="tag";var E="dec";var J="src";var P="atn";var n="atv";var N="nocode";var M="(?:^^\\.?|[+-]|\\!|\\!=|\\!==|\\#|\\%|\\%=|&|&&|&&=|&=|\\(|\\*|\\*=|\\+=|\\,|\\-=|\\->|\\/|\\/=|:|::|\\;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\?|\\@|\\[|\\^|\\^=|\\^\\^|\\^\\^=|\\{|\\||\\|=|\\|\\||\\|\\|=|\\~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*";function k(Z){var ad=0;var S=false;var ac=false;for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.ignoreCase){ac=true}else{if(/[a-z]/i.test(ae.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi,""))){S=true;ac=false;break}}}var Y={b:8,t:9,n:10,v:11,f:12,r:13};function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if("0"<=af&&af<="7"){return parseInt(ah.substring(1),8)}else{if(af==="u"||af==="x"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}}function T(af){if(af<32){return(af<16?"\\x0":"\\x")+af.toString(16)}var ag=String.fromCharCode(af);if(ag==="\\"||ag==="-"||ag==="["||ag==="]"){ag="\\"+ag}return ag}function X(am){var aq=am.substring(1,am.length-1).match(new RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]","g"));var ak=[];var af=[];var ao=aq[0]==="^";for(var ar=ao?1:0,aj=aq.length;ar<aj;++ar){var ah=aq[ar];if(/\\[bdsw]/i.test(ah)){ak.push(ah)}else{var ag=ab(ah);var al;if(ar+2<aj&&"-"===aq[ar+1]){al=ab(aq[ar+2]);ar+=2}else{al=ag}af.push([ag,al]);if(!(al<65||ag>122)){if(!(al<65||ag>90)){af.push([Math.max(65,ag)|32,Math.min(al,90)|32])}if(!(al<97||ag>122)){af.push([Math.max(97,ag)&~32,Math.min(al,122)&~32])}}}}af.sort(function(av,au){return(av[0]-au[0])||(au[1]-av[1])});var ai=[];var ap=[NaN,NaN];for(var ar=0;ar<af.length;++ar){var at=af[ar];if(at[0]<=ap[1]+1){ap[1]=Math.max(ap[1],at[1])}else{ai.push(ap=at)}}var an=["["];if(ao){an.push("^")}an.push.apply(an,ak);for(var ar=0;ar<ai.length;++ar){var at=ai[ar];an.push(T(at[0]));if(at[1]>at[0]){if(at[1]+1>at[0]){an.push("-")}an.push(T(at[1]))}}an.push("]");return an.join("")}function W(al){var aj=al.source.match(new RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)","g"));var ah=aj.length;var an=[];for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag==="("){++am}else{if("\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}}}for(var ak=1;ak<an.length;++ak){if(-1===an[ak]){an[ak]=++ad}}for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag==="("){++am;if(an[am]===undefined){aj[ak]="(?:"}}else{if("\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]="\\"+an[am]}}}}for(var ak=0,am=0;ak<ah;++ak){if("^"===aj[ak]&&"^"!==aj[ak+1]){aj[ak]=""}}if(al.ignoreCase&&S){for(var ak=0;ak<ah;++ak){var ag=aj[ak];var ai=ag.charAt(0);if(ag.length>=2&&ai==="["){aj[ak]=X(ag)}else{if(ai!=="\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return"["+String.fromCharCode(ap&~32,ap|32)+"]"})}}}}return aj.join("")}var aa=[];for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.global||ae.multiline){throw new Error(""+ae)}aa.push("(?:"+W(ae)+")")}return new RegExp(aa.join("|"),ac?"gi":"g")}function a(V){var U=/(?:^|\s)nocode(?:\s|$)/;var X=[];var T=0;var Z=[];var W=0;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=document.defaultView.getComputedStyle(V,null).getPropertyValue("white-space")}}var Y=S&&"pre"===S.substring(0,3);function aa(ab){switch(ab.nodeType){case 1:if(U.test(ab.className)){return}for(var ae=ab.firstChild;ae;ae=ae.nextSibling){aa(ae)}var ad=ab.nodeName;if("BR"===ad||"LI"===ad){X[W]="\n";Z[W<<1]=T++;Z[(W++<<1)|1]=ab}break;case 3:case 4:var ac=ab.nodeValue;if(ac.length){if(!Y){ac=ac.replace(/[ \t\r\n]+/g," ")}else{ac=ac.replace(/\r\n?/g,"\n")}X[W]=ac;Z[W<<1]=T;T+=ac.length;Z[(W++<<1)|1]=ab}break}}aa(V);return{sourceCode:X.join("").replace(/\n$/,""),spans:Z}}function B(S,U,W,T){if(!U){return}var V={sourceCode:U,basePos:S};W(V);T.push.apply(T,V.decorations)}var v=/\S/;function o(S){var V=undefined;for(var U=S.firstChild;U;U=U.nextSibling){var T=U.nodeType;V=(T===1)?(V?S:U):(T===3)?(v.test(U.nodeValue)?S:V):V}return V===S?undefined:V}function g(U,T){var S={};var V;(function(){var ad=U.concat(T);var ah=[];var ag={};for(var ab=0,Z=ad.length;ab<Z;++ab){var Y=ad[ab];var ac=Y[3];if(ac){for(var ae=ac.length;--ae>=0;){S[ac.charAt(ae)]=Y}}var af=Y[1];var aa=""+af;if(!ag.hasOwnProperty(aa)){ah.push(af);ag[aa]=null}}ah.push(/[\0-\uffff]/);V=k(ah)})();var X=T.length;var W=function(ah){var Z=ah.sourceCode,Y=ah.basePos;var ad=[Y,F];var af=0;var an=Z.match(V)||[];var aj={};for(var ae=0,aq=an.length;ae<aq;++ae){var ag=an[ae];var ap=aj[ag];var ai=void 0;var am;if(typeof ap==="string"){am=false}else{var aa=S[ag.charAt(0)];if(aa){ai=ag.match(aa[1]);ap=aa[0]}else{for(var ao=0;ao<X;++ao){aa=T[ao];ai=ag.match(aa[1]);if(ai){ap=aa[0];break}}if(!ai){ap=F}}am=ap.length>=5&&"lang-"===ap.substring(0,5);if(am&&!(ai&&typeof ai[1]==="string")){am=false;ap=J}if(!am){aj[ag]=ap}}var ab=af;af+=ag.length;if(!am){ad.push(Y+ab,ap)}else{var al=ai[1];var ak=ag.indexOf(al);var ac=ak+al.length;if(ai[2]){ac=ag.length-ai[2].length;ak=ac-al.length}var ar=ap.substring(5);B(Y+ab,ag.substring(0,ak),W,ad);B(Y+ab+ak,al,q(ar,al),ad);B(Y+ab+ac,ag.substring(ac),W,ad)}}ah.decorations=ad};return W}function i(T){var W=[],S=[];if(T.tripleQuotedStrings){W.push([C,/^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,null,"'\""])}else{if(T.multiLineStrings){W.push([C,/^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,null,"'\"`"])}else{W.push([C,/^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,null,"\"'"])}}if(T.verbatimStrings){S.push([C,/^@\"(?:[^\"]|\"\")*(?:\"|$)/,null])}var Y=T.hashComments;if(Y){if(T.cStyleComments){if(Y>1){W.push([j,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,"#"])}else{W.push([j,/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\b|[^\r\n]*)/,null,"#"])}S.push([C,/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h|[a-z]\w*)>/,null])}else{W.push([j,/^#[^\r\n]*/,null,"#"])}}if(T.cStyleComments){S.push([j,/^\/\/[^\r\n]*/,null]);S.push([j,/^\/\*[\s\S]*?(?:\*\/|$)/,null])}if(T.regexLiterals){var X=("/(?=[^/*])(?:[^/\\x5B\\x5C]|\\x5C[\\s\\S]|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+/");S.push(["lang-regex",new RegExp("^"+M+"("+X+")")])}var V=T.types;if(V){S.push([O,V])}var U=(""+T.keywords).replace(/^ | $/g,"");if(U.length){S.push([z,new RegExp("^(?:"+U.replace(/[\s,]+/g,"|")+")\\b"),null])}W.push([F,/^\s+/,null," \r\n\t\xA0"]);S.push([G,/^@[a-z_$][a-z_$@0-9]*/i,null],[O,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/,null],[F,/^[a-z_$][a-z_$@0-9]*/i,null],[G,new RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*","i"),null,"0123456789"],[F,/^\\[\s\S]?/,null],[L,/^.[^\s\w\.$@\'\"\`\/\#\\]*/,null]);return g(W,S)}var K=i({keywords:A,hashComments:true,cStyleComments:true,multiLineStrings:true,regexLiterals:true});function Q(V,ag){var U=/(?:^|\s)nocode(?:\s|$)/;var ab=/\r\n?|\n/;var ac=V.ownerDocument;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=ac.defaultView.getComputedStyle(V,null).getPropertyValue("white-space")}}var Z=S&&"pre"===S.substring(0,3);var af=ac.createElement("LI");while(V.firstChild){af.appendChild(V.firstChild)}var W=[af];function ae(al){switch(al.nodeType){case 1:if(U.test(al.className)){break}if("BR"===al.nodeName){ad(al);if(al.parentNode){al.parentNode.removeChild(al)}}else{for(var an=al.firstChild;an;an=an.nextSibling){ae(an)}}break;case 3:case 4:if(Z){var am=al.nodeValue;var aj=am.match(ab);if(aj){var ai=am.substring(0,aj.index);al.nodeValue=ai;var ah=am.substring(aj.index+aj[0].length);if(ah){var ak=al.parentNode;ak.insertBefore(ac.createTextNode(ah),al.nextSibling)}ad(al);if(!ai){al.parentNode.removeChild(al)}}}break}}function ad(ak){while(!ak.nextSibling){ak=ak.parentNode;if(!ak){return}}function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}var ah=ai(ak.nextSibling,0);for(var aj;(aj=ah.parentNode)&&aj.nodeType===1;){ah=aj}W.push(ah)}for(var Y=0;Y<W.length;++Y){ae(W[Y])}if(ag===(ag|0)){W[0].setAttribute("value",ag)}var aa=ac.createElement("OL");aa.className="linenums";var X=Math.max(0,((ag-1))|0)||0;for(var Y=0,T=W.length;Y<T;++Y){af=W[Y];af.className="L"+((Y+X)%10);if(!af.firstChild){af.appendChild(ac.createTextNode("\xA0"))}aa.appendChild(af)}V.appendChild(aa)}function D(ac){var aj=/\bMSIE\b/.test(navigator.userAgent);var am=/\n/g;var al=ac.sourceCode;var an=al.length;var V=0;var aa=ac.spans;var T=aa.length;var ah=0;var X=ac.decorations;var Y=X.length;var Z=0;X[Y]=an;var ar,aq;for(aq=ar=0;aq<Y;){if(X[aq]!==X[aq+2]){X[ar++]=X[aq++];X[ar++]=X[aq++]}else{aq+=2}}Y=ar;for(aq=ar=0;aq<Y;){var at=X[aq];var ab=X[aq+1];var W=aq+2;while(W+2<=Y&&X[W+1]===ab){W+=2}X[ar++]=at;X[ar++]=ab;aq=W}Y=X.length=ar;var ae=null;while(ah<T){var af=aa[ah];var S=aa[ah+2]||an;var ag=X[Z];var ap=X[Z+2]||an;var W=Math.min(S,ap);var ak=aa[ah+1];var U;if(ak.nodeType!==1&&(U=al.substring(V,W))){if(aj){U=U.replace(am,"\r")}ak.nodeValue=U;var ai=ak.ownerDocument;var ao=ai.createElement("SPAN");ao.className=X[Z+1];var ad=ak.parentNode;ad.replaceChild(ao,ak);ao.appendChild(ak);if(V<S){aa[ah+1]=ak=ai.createTextNode(al.substring(W,S));ad.insertBefore(ak,ao.nextSibling)}}V=W;if(V>=S){ah+=2}if(V>=ap){Z+=2}}}var t={};function c(U,V){for(var S=V.length;--S>=0;){var T=V[S];if(!t.hasOwnProperty(T)){t[T]=U}else{if(window.console){console.warn("cannot override language handler %s",T)}}}}function q(T,S){if(!(T&&t.hasOwnProperty(T))){T=/^\s*</.test(S)?"default-markup":"default-code"}return t[T]}c(K,["default-code"]);c(g([],[[F,/^[^<?]+/],[E,/^<!\w[^>]*(?:>|$)/],[j,/^<\!--[\s\S]*?(?:-\->|$)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],[L,/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]);c(g([[F,/^[\s]+/,null," \t\r\n"],[n,/^(?:\"[^\"]*\"?|\'[^\']*\'?)/,null,"\"'"]],[[m,/^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],[P,/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],[L,/^[=<>\/]+/],["lang-js",/^on\w+\s*=\s*\"([^\"]+)\"/i],["lang-js",/^on\w+\s*=\s*\'([^\']+)\'/i],["lang-js",/^on\w+\s*=\s*([^\"\'>\s]+)/i],["lang-css",/^style\s*=\s*\"([^\"]+)\"/i],["lang-css",/^style\s*=\s*\'([^\']+)\'/i],["lang-css",/^style\s*=\s*([^\"\'>\s]+)/i]]),["in.tag"]);c(g([],[[n,/^[\s\S]+/]]),["uq.val"]);c(i({keywords:l,hashComments:true,cStyleComments:true,types:e}),["c","cc","cpp","cxx","cyc","m"]);c(i({keywords:"null,true,false"}),["json"]);c(i({keywords:R,hashComments:true,cStyleComments:true,verbatimStrings:true,types:e}),["cs"]);c(i({keywords:x,cStyleComments:true}),["java"]);c(i({keywords:H,hashComments:true,multiLineStrings:true}),["bsh","csh","sh"]);c(i({keywords:I,hashComments:true,multiLineStrings:true,tripleQuotedStrings:true}),["cv","py"]);c(i({keywords:s,hashComments:true,multiLineStrings:true,regexLiterals:true}),["perl","pl","pm"]);c(i({keywords:f,hashComments:true,multiLineStrings:true,regexLiterals:true}),["rb"]);c(i({keywords:w,cStyleComments:true,regexLiterals:true}),["js"]);c(i({keywords:r,hashComments:3,cStyleComments:true,multilineStrings:true,tripleQuotedStrings:true,regexLiterals:true}),["coffee"]);c(g([],[[C,/^[\s\S]+/]]),["regex"]);function d(V){var U=V.langExtension;try{var S=a(V.sourceNode);var T=S.sourceCode;V.sourceCode=T;V.spans=S.spans;V.basePos=0;q(U,T)(V);D(V)}catch(W){if("console" in window){console.log(W&&W.stack?W.stack:W)}}}function y(W,V,U){var S=document.createElement("PRE");S.innerHTML=W;if(U){Q(S,U)}var T={langExtension:V,numberLines:U,sourceNode:S};d(T);return S.innerHTML}function b(ad){function Y(af){return document.getElementsByTagName(af)}var ac=[Y("pre"),Y("code"),Y("xmp")];var T=[];for(var aa=0;aa<ac.length;++aa){for(var Z=0,V=ac[aa].length;Z<V;++Z){T.push(ac[aa][Z])}}ac=null;var W=Date;if(!W.now){W={now:function(){return +(new Date)}}}var X=0;var S;var ab=/\blang(?:uage)?-([\w.]+)(?!\S)/;var ae=/\bprettyprint\b/;function U(){var ag=(window.PR_SHOULD_USE_CONTINUATION?W.now()+250:Infinity);for(;X<T.length&&W.now()<ag;X++){var aj=T[X];var ai=aj.className;if(ai.indexOf("prettyprint")>=0){var ah=ai.match(ab);var am;if(!ah&&(am=o(aj))&&"CODE"===am.tagName){ah=am.className.match(ab)}if(ah){ah=ah[1]}var al=false;for(var ak=aj.parentNode;ak;ak=ak.parentNode){if((ak.tagName==="pre"||ak.tagName==="code"||ak.tagName==="xmp")&&ak.className&&ak.className.indexOf("prettyprint")>=0){al=true;break}}if(!al){var af=aj.className.match(/\blinenums\b(?::(\d+))?/);af=af?af[1]&&af[1].length?+af[1]:true:false;if(af){Q(aj,af)}S={langExtension:ah,sourceNode:aj,numberLines:af};d(S)}}}if(X<T.length){setTimeout(U,250)}else{if(ad){ad()}}}U()}window.prettyPrintOne=y;window.prettyPrint=b;window.PR={createSimpleLexer:g,registerLangHandler:c,sourceDecorator:i,PR_ATTRIB_NAME:P,PR_ATTRIB_VALUE:n,PR_COMMENT:j,PR_DECLARATION:E,PR_KEYWORD:z,PR_LITERAL:G,PR_NOCODE:N,PR_PLAIN:F,PR_PUNCTUATION:L,PR_SOURCE:J,PR_STRING:C,PR_TAG:m,PR_TYPE:O}})();PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_DECLARATION,/^<!\w[^>]*(?:>|$)/],[PR.PR_COMMENT,/^<\!--[\s\S]*?(?:-\->|$)/],[PR.PR_PUNCTUATION,/^(?:<[%?]|[%?]>)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-handlebars",/^<script\b[^>]*type\s*=\s*['"]?text\/x-handlebars-template['"]?\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i],[PR.PR_DECLARATION,/^{{[#^>/]?\s*[\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{&?\s*[\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{{>?\s*[\w.][^}]*}}}/],[PR.PR_COMMENT,/^{{![^}]*}}/]]),["handlebars","hbs"]);PR.registerLangHandler(PR.createSimpleLexer([[PR.PR_PLAIN,/^[ \t\r\n\f]+/,null," \t\r\n\f"]],[[PR.PR_STRING,/^\"(?:[^\n\r\f\\\"]|\\(?:\r\n?|\n|\f)|\\[\s\S])*\"/,null],[PR.PR_STRING,/^\'(?:[^\n\r\f\\\']|\\(?:\r\n?|\n|\f)|\\[\s\S])*\'/,null],["lang-css-str",/^url\(([^\)\"\']*)\)/i],[PR.PR_KEYWORD,/^(?:url|rgb|\!important|@import|@page|@media|@charset|inherit)(?=[^\-\w]|$)/i,null],["lang-css-kw",/^(-?(?:[_a-z]|(?:\\[0-9a-f]+ ?))(?:[_a-z0-9\-]|\\(?:\\[0-9a-f]+ ?))*)\s*:/i],[PR.PR_COMMENT,/^\/\*[^*]*\*+(?:[^\/*][^*]*\*+)*\//],[PR.PR_COMMENT,/^(?:<!--|-->)/],[PR.PR_LITERAL,/^(?:\d+|\d*\.\d+)(?:%|[a-z]+)?/i],[PR.PR_LITERAL,/^#(?:[0-9a-f]{3}){1,2}/i],[PR.PR_PLAIN,/^-?(?:[_a-z]|(?:\\[\da-f]+ ?))(?:[_a-z\d\-]|\\(?:\\[\da-f]+ ?))*/i],[PR.PR_PUNCTUATION,/^[^\s\w\'\"]+/]]),["css"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_KEYWORD,/^-?(?:[_a-z]|(?:\\[\da-f]+ ?))(?:[_a-z\d\-]|\\(?:\\[\da-f]+ ?))*/i]]),["css-kw"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_STRING,/^[^\)\"\']+/]]),["css-str"]);



--- File: coverage/lcov-report/sort-arrow-sprite.png ---
(Skipped (non-matching extension))


--- File: coverage/lcov-report/sorter.js ---

/* eslint-disable */
var addSorting = (function() {
    'use strict';
    var cols,
        currentSort = {
            index: 0,
            desc: false
        };

    // returns the summary table element
    function getTable() {
        return document.querySelector('.coverage-summary');
    }
    // returns the thead element of the summary table
    function getTableHeader() {
        return getTable().querySelector('thead tr');
    }
    // returns the tbody element of the summary table
    function getTableBody() {
        return getTable().querySelector('tbody');
    }
    // returns the th element for nth column
    function getNthColumn(n) {
        return getTableHeader().querySelectorAll('th')[n];
    }

    function onFilterInput() {
        const searchValue = document.getElementById('fileSearch').value;
        const rows = document.getElementsByTagName('tbody')[0].children;
        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            if (
                row.textContent
                    .toLowerCase()
                    .includes(searchValue.toLowerCase())
            ) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        }
    }

    // loads the search box
    function addSearchBox() {
        var template = document.getElementById('filterTemplate');
        var templateClone = template.content.cloneNode(true);
        templateClone.getElementById('fileSearch').oninput = onFilterInput;
        template.parentElement.appendChild(templateClone);
    }

    // loads all columns
    function loadColumns() {
        var colNodes = getTableHeader().querySelectorAll('th'),
            colNode,
            cols = [],
            col,
            i;

        for (i = 0; i < colNodes.length; i += 1) {
            colNode = colNodes[i];
            col = {
                key: colNode.getAttribute('data-col'),
                sortable: !colNode.getAttribute('data-nosort'),
                type: colNode.getAttribute('data-type') || 'string'
            };
            cols.push(col);
            if (col.sortable) {
                col.defaultDescSort = col.type === 'number';
                colNode.innerHTML =
                    colNode.innerHTML + '<span class="sorter"></span>';
            }
        }
        return cols;
    }
    // attaches a data attribute to every tr element with an object
    // of data values keyed by column name
    function loadRowData(tableRow) {
        var tableCols = tableRow.querySelectorAll('td'),
            colNode,
            col,
            data = {},
            i,
            val;
        for (i = 0; i < tableCols.length; i += 1) {
            colNode = tableCols[i];
            col = cols[i];
            val = colNode.getAttribute('data-value');
            if (col.type === 'number') {
                val = Number(val);
            }
            data[col.key] = val;
        }
        return data;
    }
    // loads all row data
    function loadData() {
        var rows = getTableBody().querySelectorAll('tr'),
            i;

        for (i = 0; i < rows.length; i += 1) {
            rows[i].data = loadRowData(rows[i]);
        }
    }
    // sorts the table using the data for the ith column
    function sortByIndex(index, desc) {
        var key = cols[index].key,
            sorter = function(a, b) {
                a = a.data[key];
                b = b.data[key];
                return a < b ? -1 : a > b ? 1 : 0;
            },
            finalSorter = sorter,
            tableBody = document.querySelector('.coverage-summary tbody'),
            rowNodes = tableBody.querySelectorAll('tr'),
            rows = [],
            i;

        if (desc) {
            finalSorter = function(a, b) {
                return -1 * sorter(a, b);
            };
        }

        for (i = 0; i < rowNodes.length; i += 1) {
            rows.push(rowNodes[i]);
            tableBody.removeChild(rowNodes[i]);
        }

        rows.sort(finalSorter);

        for (i = 0; i < rows.length; i += 1) {
            tableBody.appendChild(rows[i]);
        }
    }
    // removes sort indicators for current column being sorted
    function removeSortIndicators() {
        var col = getNthColumn(currentSort.index),
            cls = col.className;

        cls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');
        col.className = cls;
    }
    // adds sort indicators for current column being sorted
    function addSortIndicators() {
        getNthColumn(currentSort.index).className += currentSort.desc
            ? ' sorted-desc'
            : ' sorted';
    }
    // adds event listeners for all sorter widgets
    function enableUI() {
        var i,
            el,
            ithSorter = function ithSorter(i) {
                var col = cols[i];

                return function() {
                    var desc = col.defaultDescSort;

                    if (currentSort.index === i) {
                        desc = !currentSort.desc;
                    }
                    sortByIndex(i, desc);
                    removeSortIndicators();
                    currentSort.index = i;
                    currentSort.desc = desc;
                    addSortIndicators();
                };
            };
        for (i = 0; i < cols.length; i += 1) {
            if (cols[i].sortable) {
                // add the click event handler on the th so users
                // dont have to click on those tiny arrows
                el = getNthColumn(i).querySelector('.sorter').parentElement;
                if (el.addEventListener) {
                    el.addEventListener('click', ithSorter(i));
                } else {
                    el.attachEvent('onclick', ithSorter(i));
                }
            }
        }
    }
    // adds sorting functionality to the UI
    return function() {
        if (!getTable()) {
            return;
        }
        cols = loadColumns();
        loadData();
        addSearchBox();
        addSortIndicators();
        enableUI();
    };
})();

window.addEventListener('load', addSorting);



--- File: coverage/lcov.info ---
(Skipped (non-matching extension))


--- File: coverage/unitTestReport.xml ---
(Skipped (non-matching extension))


--- File: dist ---
(Excluded)


--- File: jest.config.mjs ---
(Skipped (non-matching extension))


--- File: node_modules ---
(Excluded)


--- File: output.sick ---
(Skipped (non-matching extension))


--- File: package-lock.json ---
(Excluded)


--- File: package.json ---
(Excluded)


--- File: readme.md ---
(Skipped (non-matching extension))


--- File: src/index.ts ---

export type ValidTableName = `${string}-${string}` | `${string}_${string}` // Requires hyphen or underscore
export type ValidDatabaseName = `${string}-db` | `${string}_db` // Must end with -db or _db
export type ValidIndexName = `${string}-index` | `${string}_index`

export type ValidKeyPath =
  | string // Single key path
  | `${string}.${string}` // Nested key path
  | string[] // Compound key path

export interface ValidIndexConfig {
  name: ValidIndexName
  keyPath: ValidKeyPath
  options?: {
    unique?: boolean
    multiEntry?: boolean
  }
}

type DBRecord = {
  id?: IDBValidKey
  [key: string]: any
}

interface IndexConfig {
  name: string
  keyPath: string
  options?: IDBIndexParameters
}

class EZIndexDB {
  private db: IDBDatabase | null = null

  private memoryStore: Map<string, Map<IDBValidKey, DBRecord>> = new Map()

  private useMemoryFallback: boolean = false

  private version: number

  private autoIncrementCounter: Map<string, number> = new Map()

  constructor(useMemoryFallback: boolean = false, version: number = 1) {
    this.useMemoryFallback = useMemoryFallback
    this.version = version
  }

  // Runtime validation that matches the type definitions
  private isValidTableName(name: string): name is ValidTableName {
    return /^[a-zA-Z0-9]+[-_][a-zA-Z0-9]+$/.test(name)
  }

  private isValidDatabaseName(name: string): name is ValidDatabaseName {
    return /^[a-zA-Z0-9]+[-_]db$/.test(name)
  }

  private validateIndexConfig(index: string | ValidIndexConfig): void {
    // If it's just a string, it should be a valid field name
    if (typeof index === 'string') {
      if (!/^[a-zA-Z0-9]+[-_]?[a-zA-Z0-9]+$/.test(index)) {
        throw new Error(`Invalid index name: ${index}. Must be a valid field name.`)
      }
      return
    }

    // Check name format
    if (!index.name.endsWith('-index') && !index.name.endsWith('_index')) {
      throw new Error(`Invalid index name: ${index.name}. Must end with -index or _index`)
    }

    // Check keyPath
    if (Array.isArray(index.keyPath)) {
      // Validate compound key path
      if (index.keyPath.length === 0) {
        throw new Error('Compound keyPath cannot be empty')
      }

      index.keyPath.forEach((path) => {
        if (!/^[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*$/.test(path)) {
          throw new Error(`Invalid keyPath segment: ${path}`)
        }
      })
    } else {
      // Validate string keyPath
      if (!/^[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*$/.test(index.keyPath)) {
        throw new Error(`Invalid keyPath: ${index.keyPath}`)
      }
    }

    // Validate options if present
    if (index.options) {
      const validOptions = ['unique', 'multiEntry']
      const providedOptions = Object.keys(index.options)

      providedOptions.forEach((option) => {
        if (!validOptions.includes(option)) {
          throw new Error(`Invalid option: ${option}`)
        }

        if (typeof index.options![option as keyof IDBIndexParameters] !== 'boolean') {
          throw new Error(`Option ${option} must be a boolean`)
        }
      })

      // Validate multiEntry is not used with compound keyPath
      if (index.options.multiEntry && Array.isArray(index.keyPath)) {
        throw new Error('multiEntry option cannot be used with compound keyPath')
      }
    }
  }

  /**
   * Initializes a connection to the database or creates it if it doesn't exist.
   *
   * @param database - The name of the database
   * @param table - The name of the table (object store)
   * @param indexes - Array of index configurations or simple index names
   * @returns Promise resolving to true if successful
   */
  async start(
    database: ValidDatabaseName,
    table: ValidTableName,
    indexes: (string | ValidIndexConfig)[] = []
  ): Promise<boolean> {
    // Runtime validation
    if (!this.isValidDatabaseName(database)) {
      throw new Error('Invalid database name. Must end with -db or _db')
    }
    if (!this.isValidTableName(table)) {
      throw new Error('Invalid table name. Must contain hyphen or underscore')
    }

    // Validate all indexes before proceeding
    indexes.forEach((index) => this.validateIndexConfig(index))

    if (this.useMemoryFallback) {
      this.memoryStore.set(table, new Map())
      this.autoIncrementCounter.set(table, 1)
      return Promise.resolve(true)
    }

    if (!globalThis.indexedDB) {
      throw new Error('Failed to open database:')
    }

    return new Promise((resolve, reject) => {
      const request = indexedDB.open(database, this.version)

      request.onerror = (event) => {
        event.preventDefault()
        reject(new Error(`Failed to open database: ${request.error?.message}`))
      }

      request.onblocked = (event) => {
        reject(new Error('Database opening blocked. Please close other tabs using this app.'))
      }

      request.onupgradeneeded = (event) => {
        const db = (event.target as IDBOpenDBRequest).result

        try {
          if (db.objectStoreNames.contains(table)) {
            // Handle existing store upgrades
            const store = request.transaction!.objectStore(table)

            // Check for new indexes
            const existingIndexes = Array.from(store.indexNames)
            indexes.forEach((index) => {
              const indexName = typeof index === 'string' ? index : index.name
              if (!existingIndexes.includes(indexName)) {
                if (typeof index === 'string') {
                  store.createIndex(index, index)
                } else {
                  store.createIndex(index.name, index.keyPath, index.options)
                }
              }
            })
          } else {
            const store = db.createObjectStore(table, {
              keyPath: 'id',
              autoIncrement: true,
            })

            indexes.forEach((index) => {
              if (typeof index === 'string') {
                store.createIndex(index, index)
              } else {
                store.createIndex(index.name, index.keyPath, index.options)
              }
            })
          }
        } catch (error) {
          reject(error)
        }
      }

      request.onsuccess = () => {
        this.db = request.result

        // Add global error handler
        this.db.onerror = (event) => {
          event.preventDefault()
          console.error('Database error:', event)
        }

        resolve(true)
      }
    })
  }

  private validateConnection(): void {
    if (!this.db && !this.useMemoryFallback) {
      throw new Error('Database connection not initialized. Call start() first.')
    }
  }

  private getMemoryTable(table: string): Map<IDBValidKey, DBRecord> {
    if (!this.memoryStore.has(table)) {
      throw new Error(`Table ${table} not initialized in memory.`)
    }
    return this.memoryStore.get(table)!
  }

  private getNextId(table: string): number {
    const counter = this.autoIncrementCounter.get(table) || 1
    this.autoIncrementCounter.set(table, counter + 1)
    return counter
  }

  private getStore(table: string, mode: IDBTransactionMode): IDBObjectStore {
    this.validateConnection()
    const transaction = this.db!.transaction(table, mode)

    transaction.onerror = (event) => {
      event.preventDefault()
      return new Error(`Transaction failed: ${transaction.error?.message}`)
    }

    transaction.onabort = () => new Error('Transaction was aborted')

    return transaction.objectStore(table)
  }

  async creates(table: string, data: DBRecord): Promise<IDBValidKey> {
    if (this.useMemoryFallback) {
      const memoryTable = this.getMemoryTable(table)
      const id = data.id || this.getNextId(table)
      data.id = id
      memoryTable.set(id, structuredClone(data))
      return id
    }

    return new Promise((resolve, reject) => {
      try {
        const store = this.getStore(table, 'readwrite')
        const request = store.add(data)

        request.onerror = (event) => {
          event.preventDefault()
          reject(new Error(`Failed to create record: ${request.error?.message}`))
        }

        request.onsuccess = () => resolve(request.result)
      } catch (error) {
        reject(error)
      }
    })
  }

  async reads(table: string, id: IDBValidKey): Promise<DBRecord> {
    if (this.useMemoryFallback) {
      const memoryTable = this.getMemoryTable(table)
      const record = memoryTable.get(id)
      if (!record) throw new Error(`Record with ID ${id} not found in memory`)
      return structuredClone(record)
    }

    return new Promise((resolve, reject) => {
      try {
        const store = this.getStore(table, 'readonly')
        const request = store.get(id)

        request.onerror = (event) => {
          event.preventDefault()
          reject(new Error(`Failed to read record: ${request.error?.message}`))
        }

        request.onsuccess = () => {
          if (request.result) {
            resolve(request.result)
          } else {
            reject(new Error(`Record with ID ${id} not found`))
          }
        }
      } catch (error) {
        reject(error)
      }
    })
  }

  async updates(table: string, data: DBRecord): Promise<IDBValidKey> {
    if (!data.id) {
      throw new Error('Record must have an ID to update')
    }

    if (this.useMemoryFallback) {
      const memoryTable = this.getMemoryTable(table)
      if (!memoryTable.has(data.id)) {
        throw new Error(`Record with ID ${data.id} not found for update`)
      }
      memoryTable.set(data.id, structuredClone(data))
      return data.id
    }

    // Prevent upserts by trying to find the record
    // and throwing an error if it doesn't find it...
    const record = await this.reads(table, data.id)

    return new Promise((resolve, reject) => {
      try {
        const store = this.getStore(table, 'readwrite')
        const request = store.put(data)

        request.onerror = (event) => {
          event.preventDefault()
          reject(new Error(`Failed to update record: ${request.error?.message}`))
        }

        request.onsuccess = () => resolve(request.result)
      } catch (error) {
        reject(error)
      }
    })
  }

  async deletes(table: string, id: IDBValidKey): Promise<boolean> {
    if (this.useMemoryFallback) {
      const memoryTable = this.getMemoryTable(table)
      return memoryTable.delete(id)
    }

    // Prevent upserts by trying to find the record
    // and throwing an error if it doesn't find it...
    const record = await this.reads(table, id)

    return new Promise((resolve, reject) => {
      try {
        const store = this.getStore(table, 'readwrite')
        const request = store.delete(id)

        request.onerror = (event) => {
          event.preventDefault()
          reject(new Error(`Failed to delete record: ${request.error?.message}`))
        }

        request.onsuccess = () => resolve(true)
      } catch (error) {
        reject(error)
      }
    })
  }

  async getAll(table: string): Promise<DBRecord[]> {
    if (this.useMemoryFallback) {
      const memoryTable = this.getMemoryTable(table)
      return Array.from(memoryTable.values()).map((record) => structuredClone(record))
    }

    return new Promise((resolve, reject) => {
      try {
        const store = this.getStore(table, 'readonly')
        const request = store.getAll()

        request.onerror = (event) => {
          event.preventDefault()
          reject(new Error(`Failed to get all records: ${request.error?.message}`))
        }

        request.onsuccess = () => resolve(request.result)
      } catch (error) {
        reject(error)
      }
    })
  }

  async countRecords(table: string): Promise<number> {
    if (this.useMemoryFallback) {
      const memoryTable = this.getMemoryTable(table)
      return memoryTable.size
    }

    return new Promise((resolve, reject) => {
      try {
        const store = this.getStore(table, 'readonly')
        const request = store.count()

        request.onerror = (event) => {
          event.preventDefault()
          reject(new Error(`Failed to count records: ${request.error?.message}`))
        }

        request.onsuccess = () => resolve(request.result)
      } catch (error) {
        reject(error)
      }
    })
  }

  async close(): Promise<void> {
    if (this.useMemoryFallback) {
      this.memoryStore.clear()
      this.autoIncrementCounter.clear()
    } else if (this.db) {
      // Just close the database since we can't reliably track pending transactions
      // All pending transactions will complete or abort before the database actually closes
      this.db.close()
      this.db = null
    }
  }
}

export { EZIndexDB, type DBRecord, type IndexConfig }



--- File: tests/edge.test.ts ---

import 'fake-indexeddb/auto'
import { EZIndexDB, DBRecord, ValidIndexConfig, ValidDatabaseName, ValidTableName, ValidIndexName } from '../src/index'
import { describe, expect, it, beforeEach, afterEach } from '@jest/globals'
import { IDBFactory } from 'fake-indexeddb'

describe('EZIndexDB Error Handling and Edge Cases', () => {
  let db: EZIndexDB
  let dbName: ValidDatabaseName = 'test-db'
  let tableName: ValidTableName = 'test-table'

  beforeEach(() => {
    indexedDB = new IDBFactory()
    db = new EZIndexDB()
  })

  afterEach(async () => {
    await db.close()
  })

  describe('Database initialization', () => {
    it('should handle database upgrade with existing table and new indexes', async () => {
      // First initialization
      await db.start(dbName, tableName)
      await db.close()

      // Second initialization with new indexes
      db = new EZIndexDB(false, 2) // New version number
      const indexes: ValidIndexConfig[] = [
        { name: 'name-index', keyPath: 'name' },
        { name: 'date-index', keyPath: 'date' },
      ]

      const success = await db.start(dbName, tableName, indexes)
      expect(success).toBe(true)
    })
  })

  describe('CRUD operations error handling', () => {
    it('should handle creating a record with invalid data', async () => {
      await db.start(dbName, tableName)

      const invalidData = {
        get name() {
          throw new Error('Invalid data')
        },
      }

      await expect(db.creates(tableName, invalidData)).rejects.toThrow()
    })

    it('should handle updating a record without an ID', async () => {
      await db.start(dbName, tableName)
      const data: DBRecord = { name: 'No ID Record' }

      await expect(db.updates(tableName, data)).rejects.toThrow('Record must have an ID to update')
    })

    it('should handle reading a non-existent record', async () => {
      await db.start(dbName, tableName)
      const nonExistentId = 999

      await expect(db.reads(tableName, nonExistentId)).rejects.toThrow(`Record with ID ${nonExistentId} not found`)
    })
  })

  describe('Memory fallback error handling', () => {
    beforeEach(() => {
      db = new EZIndexDB(true)
    })

    it('should handle accessing an uninitialized table in memory mode', async () => {
      await db.start(dbName, tableName)
      const wrongTable = 'wrong-table'

      await expect(db.getAll(wrongTable)).rejects.toThrow(`Table ${wrongTable} not initialized in memory`)
    })

    it('should handle updating non-existent record in memory mode', async () => {
      await db.start(dbName, tableName)
      const data: DBRecord = { id: 999, name: 'Non-existent' }

      await expect(db.updates(tableName, data)).rejects.toThrow(`Record with ID ${data.id} not found for update`)
    })

    it('should handle reading non-existent record in memory mode', async () => {
      await db.start(dbName, tableName)
      const nonExistentId = 999

      await expect(db.reads(tableName, nonExistentId)).rejects.toThrow(
        `Record with ID ${nonExistentId} not found in memory`
      )
    })
  })

  describe('Index management', () => {
    it('should handle creating and using indexes', async () => {
      const indexes: (string | ValidIndexConfig)[] = ['simpleIndex', { name: 'complex-index', keyPath: 'nested.field' }]

      await db.start(dbName, tableName, indexes)

      // Create a record that uses the indexes
      const record: DBRecord = {
        simpleIndex: 'test',
        nested: { field: 'test' },
      }

      const id = await db.creates(tableName, record)
      expect(id).toBeDefined()

      const retrieved = await db.reads(tableName, id)
      expect(retrieved).toMatchObject(record)
    })
  })

  describe('Multiple operations', () => {
    it('should handle multiple operations in sequence', async () => {
      await db.start(dbName, tableName)

      // Create multiple records
      const ids = await Promise.all([
        db.creates(tableName, { value: 1 }),
        db.creates(tableName, { value: 2 }),
        db.creates(tableName, { value: 3 }),
      ])

      // Read all records
      const records = await db.getAll(tableName)
      expect(records).toHaveLength(3)

      // Update all records
      await Promise.all(ids.map((id) => db.updates(tableName, { id, value: 100 })))

      // Verify updates
      const updatedRecords = await db.getAll(tableName)
      expect(updatedRecords.every((r) => r.value === 100)).toBe(true)

      // Delete all records
      await Promise.all(ids.map((id) => db.deletes(tableName, id)))

      // Verify deletion
      const finalRecords = await db.getAll(tableName)
      expect(finalRecords).toHaveLength(0)
    })
  })

  describe('Database versioning', () => {
    it('should handle version upgrades correctly', async () => {
      // Start with version 1
      await db.start(dbName, tableName)
      const id = await db.creates(tableName, { name: 'Test' })
      await db.close()

      // Upgrade to version 2
      const dbV2 = new EZIndexDB(false, 2)
      await dbV2.start(dbName, tableName, ['newIndex'])

      // Verify data persisted through upgrade
      const record = await dbV2.reads(tableName, id)
      expect(record.name).toBe('Test')
    })
  })

  describe('String index validation', () => {
    it('should accept valid string indexes', async () => {
      const validIndexes = ['validName', 'valid-name', 'valid_name']

      for (const index of validIndexes) {
        await expect(db.start(dbName, tableName, [index])).resolves.not.toThrow()
      }
    })

    it('should reject invalid string indexes', async () => {
      const invalidIndexes = [
        '', // empty string
        'invalid.name', // contains period
        'invalid@name', // contains special char
        'invalid..name', // multiple special chars
        'invalid--name', // multiple hyphens
      ]

      for (const index of invalidIndexes) {
        await expect(db.start(dbName, tableName, [index])).rejects.toThrow('Must be a valid field name')
      }
    })
  })

  describe('Compound keyPath validation', () => {
    it('should reject empty compound keyPath', async () => {
      const invalidConfig = {
        name: 'test-index' as const,
        keyPath: [], // empty array
      } as ValidIndexConfig

      await expect(db.start(dbName, tableName, [invalidConfig])).rejects.toThrow('Compound keyPath cannot be empty')
    })

    it('should reject invalid keyPath segments', async () => {
      const invalidConfigs = [
        {
          name: 'test-index' as const,
          keyPath: ['invalid..path'],
        },
        {
          name: 'test-index' as const,
          keyPath: ['valid', 'invalid@path'],
        },
        {
          name: 'test-index' as const,
          keyPath: ['valid.path', 'invalid..double'],
        },
      ] as ValidIndexConfig[]

      for (const config of invalidConfigs) {
        await expect(db.start(dbName, tableName, [config])).rejects.toThrow('Invalid keyPath segment')
      }
    })

    it('should accept valid compound keyPaths', async () => {
      const validConfig = {
        name: 'test-index' as const,
        keyPath: ['firstName', 'lastName', 'address.city'],
      } as ValidIndexConfig

      await expect(db.start(dbName, tableName, [validConfig])).resolves.not.toThrow()
    })
  })

  describe('Options validation', () => {
    it('should reject invalid option names', async () => {
      const invalidConfig = {
        name: 'test-index' as const,
        keyPath: 'test',
        options: {
          invalid: true,
        },
      } as any as ValidIndexConfig

      await expect(db.start(dbName, tableName, [invalidConfig])).rejects.toThrow('Invalid option')
    })

    it('should reject non-boolean option values', async () => {
      const invalidConfig = {
        name: 'test-index' as const,
        keyPath: 'test',
        options: {
          unique: 'yes', // should be boolean
        },
      } as any as ValidIndexConfig

      await expect(db.start(dbName, tableName, [invalidConfig])).rejects.toThrow('must be a boolean')
    })

    it('should reject multiEntry with compound keyPath', async () => {
      const invalidConfig = {
        name: 'test-index' as const,
        keyPath: ['field1', 'field2'],
        options: {
          multiEntry: true,
        },
      } as ValidIndexConfig

      await expect(db.start(dbName, tableName, [invalidConfig])).rejects.toThrow(
        'multiEntry option cannot be used with compound keyPath'
      )
    })

    it('should accept valid options', async () => {
      const validConfigs = [
        {
          name: 'test-index' as const,
          keyPath: 'test',
          options: {
            unique: true,
          },
        },
        {
          name: 'test-index' as const,
          keyPath: 'test',
          options: {
            multiEntry: true,
          },
        },
        {
          name: 'test-index' as const,
          keyPath: 'test',
          options: {
            unique: true,
            multiEntry: false,
          },
        },
      ] as ValidIndexConfig[]

      for (const config of validConfigs) {
        await expect(db.start(dbName, tableName, [config])).resolves.not.toThrow()
      }
    })
  })

  describe('Complex scenarios', () => {
    it('should validate multiple indexes in one call', async () => {
      const indexes = [
        'simpleIndex',
        {
          name: 'compound-index' as const,
          keyPath: ['field1', 'field2'],
        },
        {
          name: 'unique-index' as const,
          keyPath: 'field3',
          options: {
            unique: true,
          },
        },
      ] as (string | ValidIndexConfig)[]

      await expect(db.start(dbName, tableName, indexes)).resolves.not.toThrow()
    })

    it('should reject if any index is invalid in multiple indexes', async () => {
      const indexes = [
        'validIndex',
        {
          name: 'valid-index' as const,
          keyPath: 'validField',
        },
        {
          name: 'invalid-index' as const,
          keyPath: [], // invalid empty compound key
        },
      ] as (string | ValidIndexConfig)[]

      await expect(db.start(dbName, tableName, indexes)).rejects.toThrow()
    })
  })
})

describe('EZIndexDB Additional Coverage Tests', () => {
  let db: EZIndexDB
  const dbName = 'test-db'
  const tableName = 'test-table'

  beforeEach(() => {
    indexedDB = new IDBFactory()
    db = new EZIndexDB()
  })

  afterEach(async () => {
    await db.close()
  })

  it('should handle errors during store creation', async () => {
    // Use type assertion to tell TypeScript we're intentionally testing invalid data
    const invalidIndexConfig = {
      name: '' as ValidIndexName, // Invalid empty name
      keyPath: 'test',
    } as ValidIndexConfig

    await expect(db.start(dbName, tableName, [invalidIndexConfig])).rejects.toThrow()
  })

  // You might want to add more test cases
  it('should handle various invalid index configurations', async () => {
    const invalidConfigs = [
      {
        name: '' as ValidIndexName,
        keyPath: 'test',
      },
      {
        name: 'no-suffix' as ValidIndexName, // missing required -index suffix
        keyPath: 'test',
      },
      {
        name: 'valid-index' as ValidIndexName,
        keyPath: '', // empty keyPath
      },
    ] as ValidIndexConfig[]

    for (const config of invalidConfigs) {
      await expect(db.start(dbName, tableName, [config])).rejects.toThrow()
    }
  })

  describe('Connection validation', () => {
    it('should handle database errors', async () => {
      await db.start(dbName, tableName)

      // Force database error by closing and attempting operation
      await db.close()
      await expect(db.creates(tableName, { test: 'data' })).rejects.toThrow('Database connection not initialized')
    })
  })

  describe('Transaction error handling', () => {
    it('should handle transaction errors during create operation', async () => {
      await db.start(dbName, tableName)

      // Create invalid data that will cause transaction error
      const invalidData = {
        toJSON: () => {
          throw new Error('Invalid data')
        },
      }

      await expect(db.creates(tableName, invalidData)).rejects.toThrow()
    })
  })

  describe('CRUD operation errors', () => {
    it('should handle errors during create operation', async () => {
      await db.start(dbName, tableName)
      const db1 = await db.creates(tableName, { test: 'unique' })

      // Try to create duplicate unique record
      await expect(db.creates(tableName, { id: db1, test: 'unique' })).rejects.toThrow()
    })

    it('should handle errors during read operation with invalid key', async () => {
      await db.start(dbName, tableName)

      // Try to read with invalid key (undefined cast as any)
      await expect(db.reads(tableName, undefined as any)).rejects.toThrow()
    })

    it('should handle errors during read operation with non-existent key', async () => {
      await db.start(dbName, tableName)
      const nonExistentKey = 999999

      await expect(db.reads(tableName, nonExistentKey)).rejects.toThrow()
    })
  })

  describe('Update operation errors', () => {
    it('should handle errors during update with invalid data', async () => {
      await db.start(dbName, tableName)
      const id = await db.creates(tableName, { test: 'data' })

      const invalidData = {
        id,
        get test() {
          throw new Error('Invalid data')
        },
      }

      await expect(db.updates(tableName, invalidData)).rejects.toThrow()
    })
  })

  describe('Delete operation errors', () => {
    it('should handle errors during delete operation with invalid key', async () => {
      await db.start(dbName, tableName)

      // Try to delete with invalid key (null cast as any)
      await expect(db.deletes(tableName, null as any)).rejects.toThrow()
    })

    it('should handle errors during delete operation with non-existent key', async () => {
      await db.start(dbName, tableName)
      const nonExistentKey = 999999

      await expect(db.deletes(tableName, nonExistentKey)).rejects.toThrow()
    })
  })

  describe('GetAll operation errors', () => {
    it('should handle errors during getAll operation', async () => {
      await db.start(dbName, tableName)
      await db.close()

      // Try getAll after closing database
      await expect(db.getAll(tableName)).rejects.toThrow('Database connection not initialized')
    })
  })

  describe('Count and close operations', () => {
    it('should handle errors during count operation', async () => {
      await db.start(dbName, tableName)
      await db.close()

      // Try count after closing database
      await expect(db.countRecords(tableName)).rejects.toThrow('Database connection not initialized')
    })

    it('should handle multiple close operations', async () => {
      await db.start(dbName, tableName)
      await db.close()
      await db.close() // Second close should not throw
    })
  })

  describe('Memory mode error paths', () => {
    beforeEach(() => {
      db = new EZIndexDB(true)
    })

    it('should handle errors in memory mode operations', async () => {
      await db.start(dbName, tableName)

      // Create a record
      const id = await db.creates(tableName, { test: 'data' })

      // Try operations with non-existent table
      await expect(db.reads('nonexistent', id)).rejects.toThrow('Table nonexistent not initialized in memory')

      await expect(db.updates('nonexistent', { id, test: 'updated' })).rejects.toThrow(
        'Table nonexistent not initialized in memory'
      )

      await expect(db.deletes('nonexistent', id)).rejects.toThrow('Table nonexistent not initialized in memory')

      await expect(db.countRecords('nonexistent')).rejects.toThrow('Table nonexistent not initialized in memory')
    })
  })

  describe('Edge cases for initialization', () => {
    it('should handle database name edge cases', async () => {
      await expect(db.start('' as any, tableName)).rejects.toThrow()
    })

    it('should handle table name edge cases', async () => {
      await expect(db.start(dbName, '' as any)).rejects.toThrow()
    })
  })
})



--- File: tests/index.test.ts ---

import 'fake-indexeddb/auto' // Automatically mocks indexedDB globally
import { EZIndexDB, DBRecord, ValidDatabaseName, ValidTableName } from '../src/index'
import { describe, expect, it, beforeEach, afterEach } from '@jest/globals'
import { IDBFactory } from 'fake-indexeddb'

describe('EZIndexDB', () => {
  let dbName: ValidDatabaseName = 'test-db'
  let tableName: ValidTableName = 'test-table'
  let db: EZIndexDB

  beforeEach(() => {
    indexedDB = new IDBFactory()
    db = new EZIndexDB()
  })

  afterEach(async () => {
    //await db.clearDatabase(dbName);
    db.close()
  })

  it('should initialize a database with memory fallback', async () => {
    db = new EZIndexDB(true)
    const success = await db.start(dbName, tableName)
    expect(success).toBe(true)
  })

  it('should initialize a database with IndexedDB', async () => {
    const success = await db.start(dbName, tableName)
    expect(success).toBe(true)
  })

  it('should create a record', async () => {
    await db.start(dbName, tableName)
    const data: DBRecord = { name: 'Test Record' }
    const id = await db.creates(tableName, data)
    expect(id).toBeDefined()
  })

  it('should read a record by ID', async () => {
    await db.start(dbName, tableName)
    const data: DBRecord = { name: 'Test Record' }
    const id = await db.creates(tableName, data)
    const record = await db.reads(tableName, id)
    expect(record).toMatchObject(data)
  })

  it('should update a record', async () => {
    await db.start(dbName, tableName)
    const data: DBRecord = { name: 'Test Record' }
    const id = await db.creates(tableName, data)
    const updatedData: DBRecord = { id, name: 'Updated Record' }
    const updatedId = await db.updates(tableName, updatedData)
    expect(updatedId).toBe(id)
    const record = await db.reads(tableName, id)
    expect(record.name).toBe('Updated Record')
  })

  it('should delete a record', async () => {
    await db.start(dbName, tableName)
    const data: DBRecord = { name: 'Test Record' }
    const id = await db.creates(tableName, data)
    const success = await db.deletes(tableName, id)
    expect(success).toBe(true)
    await expect(db.reads(tableName, id)).rejects.toThrow()
  })

  it('should retrieve all records', async () => {
    await db.start(dbName, tableName)
    await db.creates(tableName, { name: 'Record 1' })
    await db.creates(tableName, { name: 'Record 2' })
    const records = await db.getAll(tableName)
    expect(records.length).toBe(2)
  })

  it('should count all records', async () => {
    await db.start(dbName, tableName)
    await db.creates(tableName, { name: 'Record 1' })
    await db.creates(tableName, { name: 'Record 2' })
    const count = await db.countRecords(tableName)
    expect(count).toBe(2)
  })

  it('should throw error if start() is not called before operations', async () => {
    await expect(db.creates(tableName, { name: 'Test Record' })).rejects.toThrow()
  })

  it('should throw an error if IndexedDB is unavailable and fallback is disabled', async () => {
    const originalIndexedDB = globalThis.indexedDB
    ;(globalThis as any).indexedDB = undefined // Temporarily override indexedDB

    db = new EZIndexDB(false)
    await expect(db.start(dbName, tableName)).rejects.toThrow('Failed to open database:')

    globalThis.indexedDB = originalIndexedDB // Restore IndexedDB
  })

  it('should retrieve all records correctly in memory fallback', async () => {
    db = new EZIndexDB(true)
    await db.start(dbName, tableName)
    await db.creates(tableName, { name: 'Memory Record 1' })
    await db.creates(tableName, { name: 'Memory Record 2' })

    const records = await db.getAll(tableName)
    expect(records.length).toBe(2)
  })

  it('should return an empty array when retrieving all records from an empty table', async () => {
    await db.start(dbName, tableName)
    const records = await db.getAll(tableName)
    expect(records).toEqual([])
  })

  it('should properly close the database', async () => {
    await db.start(dbName, tableName)
    await db.close()
    expect(() => db.creates(tableName, { name: 'Record After Close' })).rejects.toThrow(
      'Database connection not initialized. Call start() first.'
    )
  })

  it('should generate incremental IDs for memory fallback', async () => {
    db = new EZIndexDB(true)
    await db.start(dbName, tableName)

    const id1 = await db.creates(tableName, { name: 'Record 1' })
    const id2 = await db.creates(tableName, { name: 'Record 2' })

    expect(id1).toBe(1)
    expect(id2).toBe(2)
  })

  it('should throw an error when accessing a non-existent memory table', async () => {
    db = new EZIndexDB(true)
    await db.start(dbName, tableName)
    await expect(db.getAll('nonExistentTable')).rejects.toThrow('Table nonExistentTable not initialized in memory.')
  })

  it('should throw an error when updating a record that doesn’t exist', async () => {
    await db.start(dbName, tableName)
    const fakeRecord: DBRecord = { id: 999, name: 'Nonexistent Record' }
    await expect(db.updates(tableName, fakeRecord)).rejects.toThrow('Record with ID 999 not found')
  })

  it('should return false when trying to delete a non-existent record', async () => {
    await db.start(dbName, tableName)
    await expect(db.deletes(tableName, 999)).rejects.toThrow('Record with ID 999 not found')
  })

  it('should return zero for record count on an empty table', async () => {
    await db.start(dbName, tableName)
    const count = await db.countRecords(tableName)
    expect(count).toBe(0)
  })

  describe('Memory fallback mode', () => {
    beforeEach(() => {
      db = new EZIndexDB(true)
    })

    it('should create, read, update, delete, and retrieve records in memory', async () => {
      await db.start(dbName, tableName)

      // Create
      const data: DBRecord = { name: 'Memory Record' }
      const id = await db.creates(tableName, data)

      // Read
      const record = await db.reads(tableName, id)
      expect(record).toMatchObject(data)

      // Update
      const updatedData: DBRecord = { id, name: 'Updated Memory Record' }
      const updatedId = await db.updates(tableName, updatedData)
      expect(updatedId).toBe(id)

      // Delete
      const success = await db.deletes(tableName, id)
      expect(success).toBe(true)

      // Get all
      const allRecords = await db.getAll(tableName)
      expect(allRecords.length).toBe(0)
    })
  })
})



--- File: tsconfig.base.json ---

{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["es2020", "dom"],
    "declaration": true,
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": false,
    "inlineSourceMap": true,
    "inlineSources": true,
    "experimentalDecorators": true,
    "strictPropertyInitialization": false,
    "typeRoots": ["./node_modules/@types"],
    "types": ["node", "@types/jest"],
    "allowJs": true,
    "esModuleInterop": true,
    "moduleResolution": "node",
    "rootDir": "src"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "cdk.out"]
}



--- File: tsconfig.cjs.json ---

{
  "extends": "./tsconfig.base.json",
  "compilerOptions": {
    "module": "CommonJS",
    "outDir": "dist/cjs"
  }
}



--- File: tsconfig.esm.json ---

{
  "extends": "./tsconfig.base.json",
  "compilerOptions": {
    "module": "ES2020",
    "outDir": "dist/esm"
  }
}

